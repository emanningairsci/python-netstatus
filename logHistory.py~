
from pymongo import MongoClient
from pymongo import ASCENDING
import datetime
import config
import time

client = MongoClient()
db = client.netstatusDB
collection = db.history
collection.ensure_index([("timestamp", ASCENDING)]) 

def testWriteHistory():
    db.history.update(
        {"hostname": "testhost"}, {'$push': { "history": { "timestamp": 00000000, "minutes": config.sleepTime / 60} } }
    )
    count = db.history.find({"hostname": "testhost"}).count()
    print "testHistory done, %s elements in history" % count

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------
# logHistory: A function to log how long the host was up each hour over the past 10 days. Documents should eventually be stored in the "history"
# collection of the "netstatusDB" database.
# Each document in this database will contain a "hostname" and "history" item and should be formatted like this:
#              
#    {"_id": ObjectId("..."), "hostname" : "host", "history" : [ {"timestamp": 1404403200, "minutes": 45}, {"timestamp": 1404406800, minutes: 60}, etc... ]}
#
# For now, the "history" subdocuments are being stored in the 'log' collection along with everything else.
# The timestamps should be in the Unix epoch format (ex., 946753200 translates to 12:00:00 PM, Jan 1, 2000 MST)

def logHistory(status, hostname): 

    epoch_time = int(time.time())
    hour = int(time.strftime("%H"))
    day = int(time.strftime("%d"))
    month = int(time.strftime("%m"))
    year = int(time.strftime("%Y"))
    rounded_epoch = int(datetime.datetime(year, month, day, hour).strftime('%s'))
    # If 'status' is 'true', the server is still online, then (config.sleepTime) minutes should be added
    # to the total number of uptime minutes in that hour. We first need to make sure the timestamp exists in the
    # database before we can increment it.
    timestamp_exists = db.history.find({"hostname": hostname, "history.timestamp": rounded_epoch}).count()
    if status is True and timestamp_exists != 0:
        db.history.update(
            {"hostname" : hostname, "history.timestamp": rounded_epoch }, {'$inc': {"history.$.minutes": config.sleepTime / 60} }
        )
        print "History updated for %s" % hostname

    if status is True and timestamp_exists == 0:
        db.history.update(
            {"hostname": hostname}, {'$push': { "history": { "timestamp": rounded_epoch, "minutes": config.sleepTime / 60} } }
        )
        print "History created for %s hour on %s" % (rounded_epoch, hostname)
