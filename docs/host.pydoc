Help on module host:

NAME
    host - Defines the Host class.

FILE
    /home/one/dev/python-netstatus/host.py

CLASSES
    __builtin__.object
        Host
    exceptions.Exception(exceptions.BaseException)
        NameConflictError
    
    class Host(__builtin__.object)
     |  Methods defined here:
     |  
     |  __getattr__(self, name)
     |  
     |  __init__(self, ip)
     |  
     |  __setattr__(self, name, value)
     |  
     |  addService(self, name, service)
     |      Add a service object to your host, with the specified name.
     |      Example:
     |      
     |      >>> myHost = host.Host('127.0.0.1')
     |      >>> myHTTPService = services.httpserver.HTTPServer(myHost)
     |      >>> myHost.addService("http", myHTTPService)
     |      >>> myHost.http.getStatus()
     |      True
     |      >>> myHost.http.getResponse()
     |      {'foo': 'bar'}
     |      
     |      Raises host.NameConflictError if a 'name' attribute already
     |      exists in the host object.
     |      
     |      >>> myHost.addService("http", myOtherHTTPService)
     |      Traceback (most recent call last):
     |          ...
     |      host.NameConflictError: Member variable self.http cannot be assigned because that name is taken.
     |      
     |      Note: 'name' MUST be a string, or be able to be converted to
     |      a string with str(name).
     |  
     |  getResponse(self)
     |      A 'getter' method that returns a dictionary of (possibly) useful
     |      information about the last ping response. Note that only
     |      information about the most recent response is stored. If
     |      self.getStatus() has not already been called, this function will
     |      return the default value of the object used to store ping
     |      response information, None.
     |      
     |      >>> myHost.getResponse()
     |      >>> myHost.getStatus()
     |      True
     |      >>> myHost.getResponse()
     |      {'delay': delay, 'ip': ip, 'packet_size': packet_size, 'ip_header': ip_header, 'icmp_header': icmp_header}
     |      >>> myHost.getResponse()['delay']
     |      delay
     |  
     |  getStatus(self)
     |      Send a single ICMP echo request.
     |      
     |      Returns True if an ICMP response is recieved from the
     |      pinged host, and False otherwise.
     |      
     |      This function also sets/changes the value of self._pingResponse
     |      to include information about the ICMP response packet. This
     |      information can be accessed publicly in the form of a getter
     |      member function that returns a dictionary. See
     |      getResponse().
     |      
     |      NOTE: Pinging in Python will open a raw socket, and requires
     |      root/Administrator permissions. The Ping class will raise
     |      socket.error if you don't have the proper permissions.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class NameConflictError(exceptions.Exception)
     |  Method resolution order:
     |      NameConflictError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message


